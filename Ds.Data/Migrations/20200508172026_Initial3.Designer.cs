// <auto-generated />
using System;
using Ds.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ds.Data.Migrations
{
    [DbContext(typeof(EscolaContext))]
    [Migration("20200508172026_Initial3")]
    partial class Initial3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ds.Business.Models.AlunosResponsavel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("AlunosResponsaveis");
                });

            modelBuilder.Entity("Ds.Business.Models.Diario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Presenca")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId")
                        .IsUnique();

                    b.HasIndex("DisciplinaId")
                        .IsUnique();

                    b.ToTable("Diarios");
                });

            modelBuilder.Entity("Ds.Business.Models.Disciplina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeDisciplina")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("Ds.Business.Models.DisciplinaProfessor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("DisciplinaProfessores");
                });

            modelBuilder.Entity("Ds.Business.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Ds.Business.Models.Nota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ValorNota")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Ds.Business.Models.Periodo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomePeriodo")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("Ds.Business.Models.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Documento")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Pessoal");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("Ds.Business.Models.Serie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeSerie")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Ds.Business.Models.Turma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeTurma")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("Ds.Business.Models.TurmaAluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("TurmasAlunos");
                });

            modelBuilder.Entity("Ds.Business.Models.TurmaDisciplina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("TurmaDisciplinas");
                });

            modelBuilder.Entity("Ds.Business.Models.Aluno", b =>
                {
                    b.HasBaseType("Ds.Business.Models.Pessoa");

                    b.HasDiscriminator().HasValue("Aluno");
                });

            modelBuilder.Entity("Ds.Business.Models.Professor", b =>
                {
                    b.HasBaseType("Ds.Business.Models.Pessoa");

                    b.Property<string>("Registro")
                        .HasColumnType("varchar(100)");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Ds.Business.Models.Responsavel", b =>
                {
                    b.HasBaseType("Ds.Business.Models.Pessoa");

                    b.Property<string>("GrauParentesco")
                        .HasColumnType("varchar(100)");

                    b.HasDiscriminator().HasValue("Responsavel");
                });

            modelBuilder.Entity("Ds.Business.Models.AlunosResponsavel", b =>
                {
                    b.HasOne("Ds.Business.Models.Aluno", "Alunos")
                        .WithMany("AlunoResponsaveis")
                        .HasForeignKey("AlunoId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Responsavel", "Responsaveis")
                        .WithMany("AlunosResponsaveis")
                        .HasForeignKey("ResponsavelId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.Diario", b =>
                {
                    b.HasOne("Ds.Business.Models.Aluno", "Aluno")
                        .WithOne("Diario")
                        .HasForeignKey("Ds.Business.Models.Diario", "AlunoId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Disciplina", "Disciplina")
                        .WithOne("Diario")
                        .HasForeignKey("Ds.Business.Models.Diario", "DisciplinaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.DisciplinaProfessor", b =>
                {
                    b.HasOne("Ds.Business.Models.Disciplina", "Disciplinas")
                        .WithMany("DisciplinaProfessores")
                        .HasForeignKey("DisciplinaId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Professor", "Professores")
                        .WithMany("DisciplinaProfessor")
                        .HasForeignKey("ProfessorId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.Endereco", b =>
                {
                    b.HasOne("Ds.Business.Models.Pessoa", "Pessoa")
                        .WithOne("Endereco")
                        .HasForeignKey("Ds.Business.Models.Endereco", "PessoaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.Nota", b =>
                {
                    b.HasOne("Ds.Business.Models.Aluno", "Aluno")
                        .WithMany("Nota")
                        .HasForeignKey("AlunoId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Disciplina", "Disciplina")
                        .WithMany("Nota")
                        .HasForeignKey("DisciplinaId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Periodo", "Periodo")
                        .WithMany("Nota")
                        .HasForeignKey("PeriodoId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.Turma", b =>
                {
                    b.HasOne("Ds.Business.Models.Serie", "Serie")
                        .WithMany("Turmas")
                        .HasForeignKey("SerieId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.TurmaAluno", b =>
                {
                    b.HasOne("Ds.Business.Models.Aluno", "Alunos")
                        .WithMany("TurmaAlunos")
                        .HasForeignKey("AlunoId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Turma", "Turmas")
                        .WithMany("TurmaAlunos")
                        .HasForeignKey("TurmaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Ds.Business.Models.TurmaDisciplina", b =>
                {
                    b.HasOne("Ds.Business.Models.Disciplina", "Disciplinas")
                        .WithMany("TurmasDisciplinas")
                        .HasForeignKey("DisciplinaId")
                        .IsRequired();

                    b.HasOne("Ds.Business.Models.Turma", "Turmas")
                        .WithMany("TurmaDisciplinas")
                        .HasForeignKey("TurmaId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
